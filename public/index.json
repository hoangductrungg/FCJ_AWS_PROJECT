[
{
	"uri": "//localhost:1313/",
	"title": "Session Management",
	"tags": [],
	"description": "",
	"content": "Work with Amazon System Manager - Session Manager Overall In this lab, you\u0026rsquo;ll learn the basics and practice of Amazon System Manager - Session Manager . Perform creating public and private instance connections.\nContent Introduction Preparation Connect to EC2 instance Manage session logs Port Forwarding Clean up resources "
},
{
	"uri": "//localhost:1313/1-introduce/",
	"title": "Build and Deploy CI/CD Frontend project in AWS",
	"tags": [],
	"description": "",
	"content": "AWS cung cấp một loạt các dịch vụ và công cụ mạnh mẽ để giúp bạn xây dựng và triển khai các dự án frontend một cách hiệu quả và linh hoạt. Việc lựa chọn công cụ phù hợp sẽ phụ thuộc vào quy mô dự án, yêu cầu về cấu hình, và kinh nghiệm của đội ngũ phát triển.\nVới việc sử dụng AWS để build và deploy frontend, bạn sẽ có được những ưu điểm sau:\nKhả năng mở rộng: AWS cho phép bạn dễ dàng mở rộng quy mô ứng dụng để đáp ứng nhu cầu tăng trưởng của người dùng. Đa dạng các dịch vụ: Bạn có thể kết hợp nhiều dịch vụ khác nhau của AWS để tạo ra một pipeline CI/CD hoàn chỉnh. Tính ổn định và bảo mật: AWS đảm bảo tính sẵn sàng cao và các biện pháp bảo mật mạnh mẽ cho ứng dụng của bạn. Cộng đồng lớn: Có một cộng đồng người dùng AWS rất lớn, bạn dễ dàng tìm thấy tài liệu, hướng dẫn và hỗ trợ khi cần. "
},
{
	"uri": "//localhost:1313/3-accessibilitytoinstances/3.1-public-instance/",
	"title": "Kết nối đến máy chủ Public",
	"tags": [],
	"description": "",
	"content": "\nTruy cập vào giao diện quản trị của dịch vụ EC2. Click chọn Tích vào ô gitlab-runner. Click Connect. Sau khi connect xong. Sử dụng lệnh sudo -i để tiến vào user root. Truy cập vào project mà bạn đã push lên truớc dó Tiếp đến ta chọn Settings Click CICD. Click Expand Runner. Sau đó chọn New project runner Tiếp đến ở mục tags\nSetname mục tags mà bạn muốn Mục Configuration (optional) đặt tên như bên trên bạn đặt Tích chọn Create Runner Sau khi create runner xong tích chọn Linux Kéo xuống dưới ta sẽ thấy dòng chữ How do iintall Gitlab Runner? Tích chọn vào đấy . Tích chọn xong ta sẽ thấy như bên ảnh , rồi sau đó ta copy hết vào chuyển sang console AWS Paste hết thứ ta vừa copy vào và Enter Sau khi paste xong ta trở về gitlab runner copy như trong ảnh Rồi quay trở lại console AWS dán vào Sử dụng lệnh vi /etc/gitlab-runner/config.toml đê chỉnh số lương gitlab runner có thể chạy trên các project . Ở đây mình chỉnh là 4 "
},
{
	"uri": "//localhost:1313/2-prerequiste/2.1-createec2/",
	"title": "Preparing VPC and EC2",
	"tags": [],
	"description": "",
	"content": "In this step, we will need to create a VPC with 2 public / private subnets. Then create 1 EC2 Instance Linux located in the public subnet, 1 EC2 Instance Windows located in the private subnet.\nThe architecture overview after you complete this step will be as follows:\nTo learn how to create EC2 instances and VPCs with public/private subnets, you can refer to the lab:\nAbout Amazon EC2 Works with Amazon VPC Content Create VPC Create Public Subnet Create Private Subnet Create security group Create public Linux server Create private Windows server "
},
{
	"uri": "//localhost:1313/2-prerequiste/2.1-createec2/2.1.1-createvpc/",
	"title": "Tạo EC2 ",
	"tags": [],
	"description": "",
	"content": "Tạo EC2 ** Truy cập giao diện quản trị dịch vụ EC2 Click Launch Instance. Keo xuong Tại mục Name tag điền gitlab-runner. Click Ubuntu. Click Create security group. Click Allow SSH traffic from. Click Allow HTTPS traffic from the internet. Click Allow HTTP traffic from the internet. "
},
{
	"uri": "//localhost:1313/4-s3log/4.1-updateiamrole/",
	"title": "Viêt câu hình CICD trên gitlab",
	"tags": [],
	"description": "",
	"content": "Để viết cấu hình CICD cho gitlab đầu tiên ta phải có một file .gitlab-ci.yml đê viết kịch bản cho câu hình đó\nTạo file để viết kịch bản cho file .gitlab-ci.yml Truy cập vào project mà ta đã tạo trước đó Click vào dấu cộng.\nClick New file. Đặt tên cho file .gitlab-ci.yml.\nDưới đây là 1 kịch bản tôi đã viết sẵn bạn có thể tham khảo\n"
},
{
	"uri": "//localhost:1313/2-prerequiste/2.1-createec2/2.1.2-createpublicsubnet/",
	"title": "Create Public Subnet",
	"tags": [],
	"description": "",
	"content": "Create Public Subnet Click Subnets. Click Create subnet. At the Create subnet page. In the VPC ID section, click Lab VPC. In the Subnet name field, enter Lab Public Subnet. In the Availability Zone section, select the first Availability zone. In the field IPv4 CIRD block enter 10.10.1.0/24. Scroll to the bottom of the page, click Create subnet.\nClick Lab Public Subnet.\nClick Actions. Click Edit subnet settings. Click Enable auto-assign public IPv4 address. Click Save. Click Internet Gateways. Click Create internet gateway. At the Create internet gateway page. In the Name tag field, enter Lab IGW. Click Create internet gateway. After successful creation, click Actions. Click Attach to VPC. At the Attach to VPC page. In the Available VPCs section, select Lab VPC. Click Attach internet gateway. Check the successful attaching process as shown below. Next we will create a custom route table to assign to Lab Public Subnet. Click Route Tables. Click Create route table. At the Create route table page. In the Name field, enter Lab Publicrtb. In the VPC section, select Lab VPC. Click Create route table. After creating the route table successfully. Click Edit routes. At the Edit routes page. Click Add route. In the Destination field, enter 0.0.0.0/0 In the Target section, select Internet Gateway and then select Lab IGW. Click Save changes. Click the Subnet associations tab. Click Edit subnet associations to proceed with the associate custom route table we just created in Lab Public Subnet. At the Edit subnet associations page. Click on Lab Public Subnet. Click Save associations. Check that the route table information has been associated with Lab Public Subnet and the internet route information has been pointed to the Internet Gateway as shown below. "
},
{
	"uri": "//localhost:1313/2-prerequiste/",
	"title": "Preparation ",
	"tags": [],
	"description": "",
	"content": "\rYou need to create 1 Linux instance on the public subnet and 1 Window instance on the private subnet to perform this lab.\nTo learn how to create EC2 instances and VPCs with public/private subnets, you can refer to the lab:\nAbout Amazon EC2 Works with Amazon VPC In order to use System Manager to manage our window instances in particular and our instances in general on AWS, we need to give permission to our instances to be able to work with System Manager. In this preparation, we will also proceed to create an IAM Role to grant permissions to instances that can work with System Manager.\nContent Prepare VPC and EC2 Create IAM Role "
},
{
	"uri": "//localhost:1313/3-accessibilitytoinstances/",
	"title": "Connect to EC2 servers",
	"tags": [],
	"description": "",
	"content": "In this step, we will connect to our EC2 servers, located in both the public and private subnets.\nContent 3.1. Connect to EC2 Public Server 3.2. Cconnect to EC2 Private Server\n"
},
{
	"uri": "//localhost:1313/2-prerequiste/2.1-createec2/2.1.3-createprivatesubnet/",
	"title": "Create Private Subnet",
	"tags": [],
	"description": "",
	"content": "Create Private Subnet Click Subnets. Click Create subnet. At the Create subnet page. In the VPC ID section, click Lab VPC. In the Subnet name field, enter Lab Private Subnet. In the Availability Zone section, select the first Availability zone. In the field IPv4 CIRD block enter 10.10.2.0/24. Scroll to the bottom of the page, click Create subnet. The next step is to create the necessary security groups for the lab.\n"
},
{
	"uri": "//localhost:1313/2-prerequiste/2.1-createec2/2.1.4-createsecgroup/",
	"title": "Create security groups",
	"tags": [],
	"description": "",
	"content": "Create security groups In this step, we will proceed to create the security groups used for our instances. As you can see, these security groups will not need to open traditional ports to ssh like port 22 or remote desktop through port 3389.\nCreate security group for Linux instance located in public subnet Go to VPC service management console Click Security Group. Click Create security group. In the Security group name field, enter SG Public Linux Instance. In the Description section, enter SG Public Linux Instance. In the VPC section, click the X to reselect the Lab VPC you created for this lab. Keep Outbound rule, drag the mouse to the bottom. Click Create security group. As you can see, the security group we created to use for Linux public instances will not need to open traditional ports to ssh like port 22.\nCreate a security group for a Windows instance located in a private subnet After successfully creating a security group for the Linux instance located in the public subnet, click the Security Groups link to return to the Security groups list. Click Create security group.\nIn the Security group name field, enter SG Private Windows Instance.\nIn the Description section, enter SG Private Windows Instance. In the VPC section, click the X to reselect the Lab VPC you created for this lab. Scroll down. Add Outbound rule to allow TCP 443 connection to 10.10.0.0/16 ( CIDR of Lab VPC we created) Click Create security group. For the Instance in the private subnet, we will connect to the Session Manager endpoint over a TLS encrypted connection, so we need to allow outbound connection from our instance to VPC CIDR through port 443.\nCreate security group for VPC Endpoint In this step, we will create security group for VPC Endpoint of Session Manager. After successfully creating the security group for the Windows instance in the private subnet, click the Security Groups link to return to the Security groups list. Click Create security group. In the Security group name field, enter SG VPC Endpoint. In the Description section, enter SG VPC Endpoint. In the VPC section, click the X to reselect the Lab VPC you created for this lab. Scroll down. Delete Outbound rule. Add Inbound rule allowing TCP 443 to come from 10.10.0.0/16 ( CIDR of Lab VPC we created ). Click Create security group. So we are done creating the necessary security groups for EC2 instances and VPC Endpoints.\n"
},
{
	"uri": "//localhost:1313/4-s3log/",
	"title": "Manage session logs",
	"tags": [],
	"description": "",
	"content": "With Session Manager, we can view the history of connections to instances through Session history. However, we have not seen the details of the commands used in a session.\nIn this section, we will proceed to create an S3 bucket and configure the session logs feature to see the details of the commands used in the session.\nContent: Update IAM Role Create S3 Bucket Create S3 Gateway endpoint Configure Session logs "
},
{
	"uri": "//localhost:1313/5-portfwd/",
	"title": "Check pipelines",
	"tags": [],
	"description": "",
	"content": "Sau khi viết kịch bản xong ta check pipelines xem đã passed chưa Truy cập vào Build Click Pipelines , sau đó check xem pipelines dã chạy thành công chua Chúc mừng bạn đã hoàn tất bài thực hành hướng dẫn cách build và deploy CI/CD Frontend trên AWS . Bây giờ chúng ta sẽ clean up nhé !!!!\n"
},
{
	"uri": "//localhost:1313/2-prerequiste/2.1-createec2/2.1.5-createec2linux/",
	"title": "Tạo Project gitlab và push folder lên project gitlab",
	"tags": [],
	"description": "",
	"content": " Truy cập vào Gitlab Click New project. Click Create blank project. Tại trang Gitlab project. Đặt tên cho project gitlab-runne tích bỏ chọn Initialize repository with a README. Tại trang gitlab Copy 2 dòng đầu Git global setup Sau khi copy xong truy cập vào Terminal mà file bạn muốn push vào Sau đó paste 2 dòng bạn vừa copy Sau dó gõ git init Tiếp đến làm theo tứ tự trong ảnh và paste vào Sau khi push xong ta sẽ được như ảnh "
},
{
	"uri": "//localhost:1313/6-cleanup/",
	"title": "Clean up resources",
	"tags": [],
	"description": "",
	"content": "We will take the following steps to delete the resources we created in this exercise.\nDelete EC2 instance Go to EC2 service management console\nClick Instances. Select both Public Linux Instance and Private Windows Instance instances. Click Instance state. Click Terminate instance, then click Terminate to confirm. Go to IAM service management console\nClick Roles. In the search box, enter SSM. Click to select SSM-Role. Click Delete, then enter the role name SSM-Role and click Delete to delete the role. Click Users. Click on user Portfwd. Click Delete, then enter the user name Portfwd and click Delete to delete the user. Delete S3 bucket Access System Manager - Session Manager service management console.\nClick the Preferences tab. Click Edit. Scroll down. In the section S3 logging. Uncheck Enable to disable logging. Scroll down. Click Save. Go to S3 service management console\nClick on the S3 bucket we created for this lab. (Example: lab-fcj-bucket-0001 ) Click Empty. Enter permanently delete, then click Empty to proceed to delete the object in the bucket. Click Exit. After deleting all objects in the bucket, click Delete\nEnter the name of the S3 bucket, then click Delete bucket to proceed with deleting the S3 bucket. Delete VPC Endpoints Go to VPC service management console Click Endpoints. Select the 4 endpoints we created for the lab including SSM, SSMMESSAGES, EC2MESSAGES, S3GW. Click Actions. Click Delete VPC endpoints. In the confirm box, enter delete.\nClick Delete to proceed with deleting endpoints. Click the refresh icon, check that all endpoints have been deleted before proceeding to the next step.\nDelete VPC Go to VPC service management console\nClick Your VPCs. Click on Lab VPC. Click Actions. Click Delete VPC. In the confirm box, enter delete to confirm, click Delete to delete Lab VPC and related resources.\n"
},
{
	"uri": "//localhost:1313/categories/",
	"title": "Categories",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "//localhost:1313/tags/",
	"title": "Tags",
	"tags": [],
	"description": "",
	"content": ""
}]